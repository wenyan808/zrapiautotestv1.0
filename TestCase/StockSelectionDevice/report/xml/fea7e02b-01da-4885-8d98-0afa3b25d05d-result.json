{"name": "test_StockSelectionDevice_modify01", "status": "broken", "statusDetails": {"message": "TypeError: Object of type ObjectId is not JSON serializable", "trace": "self = <TestCase.StockSelectionDevice.test_StockSelectionDevice_02_modify.TestStockSelectionDeviceModify object at 0x000001BCCB176D00>\n\n    @allure.story('修改策略_1-中国香港')\n    def test_StockSelectionDevice_modify01(self):\n        # 通过传入数据库的IP地址address，用户名user，密码password，数据库名database连接到后台数据库\n        q = OperationSql(\"192.168.1.237\", \"root\", \"123456\", \"user_account\")\n        # 通过查询语句找到用户id\n        userId = q.show_sql(\"select id from t_user_account where `zr_no`= '68904140';\")\n        # 传入键key，值price，数据库名database，表名surface到MongoDB数据库\n        id = MongoDB(\"user_id\", str(userId)[3:-5:], \"stock_selector\", \"t_tactic6\")\n        # print(str(userId)[3:-5:])\n        _id = str(id[-1].get('_id'))\n        # print(_id)\n        url = HTTP + \"/as_market/api/stock_selector/v1/tactic/modify\"\n        headers = JSON\n    \n        # 拼装参数\n    \n        paylo = {\n            \"id\": id,\n            \"name\": \"test003\",\n            \"market\": {\n            \"region\": 1\n            }\n        }\n        # print(paylo)\n>       sign1 = {\"sign\": get_sign(paylo)}  # 把参数签名后通过sign1传出来\n\ntest_StockSelectionDevice_02_modify.py:49: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\Common\\sign.py:14: in get_sign\n    jdata = json.dumps(payload)\nC:\\Users\\ASUS\\AppData\\Local\\Programs\\Python\\Python38\\lib\\json\\__init__.py:231: in dumps\n    return _default_encoder.encode(obj)\nC:\\Users\\ASUS\\AppData\\Local\\Programs\\Python\\Python38\\lib\\json\\encoder.py:199: in encode\n    chunks = self.iterencode(o, _one_shot=True)\nC:\\Users\\ASUS\\AppData\\Local\\Programs\\Python\\Python38\\lib\\json\\encoder.py:257: in iterencode\n    return _iterencode(o, 0)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.encoder.JSONEncoder object at 0x000001BCBDBF1220>\no = ObjectId('5f1fe2d49524000006fed000')\n\n    def default(self, o):\n        \"\"\"Implement this method in a subclass such that it returns\n        a serializable object for ``o``, or calls the base implementation\n        (to raise a ``TypeError``).\n    \n        For example, to support arbitrary iterators, you could\n        implement default like this::\n    \n            def default(self, o):\n                try:\n                    iterable = iter(o)\n                except TypeError:\n                    pass\n                else:\n                    return list(iterable)\n                # Let the base class default method raise the TypeError\n                return JSONEncoder.default(self, o)\n    \n        \"\"\"\n>       raise TypeError(f'Object of type {o.__class__.__name__} '\n                        f'is not JSON serializable')\nE       TypeError: Object of type ObjectId is not JSON serializable\n\nC:\\Users\\ASUS\\AppData\\Local\\Programs\\Python\\Python38\\lib\\json\\encoder.py:179: TypeError"}, "start": 1601192952188, "stop": 1601192952214, "uuid": "21b5e575-6b13-4030-a359-8244c7b715d8", "historyId": "8dff92072f35e560d80c5814605ae57b", "testCaseId": "05fb960158dfbc3e5d891cb2d478e517", "fullName": "TestCase.StockSelectionDevice.test_StockSelectionDevice_02_modify.TestStockSelectionDeviceModify#test_StockSelectionDevice_modify01", "labels": [{"name": "story", "value": "修改策略_1-中国香港"}, {"name": "feature", "value": "选股器"}, {"name": "parentSuite", "value": "TestCase.StockSelectionDevice"}, {"name": "suite", "value": "test_StockSelectionDevice_02_modify"}, {"name": "subSuite", "value": "TestStockSelectionDeviceModify"}, {"name": "host", "value": "DESKTOP-KBU1G8M"}, {"name": "thread", "value": "3496-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "TestCase.StockSelectionDevice.test_StockSelectionDevice_02_modify"}]}