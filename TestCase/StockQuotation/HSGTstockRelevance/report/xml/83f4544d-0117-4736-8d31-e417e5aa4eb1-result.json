{"name": "test_e", "status": "broken", "statusDetails": {"message": "ValueError: Sample larger than population or is negative", "trace": "cls = <class 'TestCase.StockQuotation.HSGTstockRelevance.test_HSGTstock_Ifhsgtis_lgt.TestHSGTstockIfhsgtis_lgt'>\n\n    @classmethod\n    def setup_class(cls) -> None:\n        login()\n        q = OperationSql(\"192.168.1.237\", \"root\", \"123456\", \"stock_market\")\n        ts_code = q.show_sql(\"select ts,code from t_stock_search where ts='SH' or ts='SZ';\")\n>       random_stock = random.sample(ts_code, 10)\n\ntest_HSGTstock_Ifhsgtis_lgt.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <random.Random object at 0x0000021C75FA4BD0>\npopulation = ('SH', '000001'), k = 10\n\n    def sample(self, population, k):\n        \"\"\"Chooses k unique random elements from a population sequence or set.\n    \n        Returns a new list containing elements from the population while\n        leaving the original population unchanged.  The resulting list is\n        in selection order so that all sub-slices will also be valid random\n        samples.  This allows raffle winners (the sample) to be partitioned\n        into grand prize and second place winners (the subslices).\n    \n        Members of the population need not be hashable or unique.  If the\n        population contains repeats, then each occurrence is a possible\n        selection in the sample.\n    \n        To choose a sample in a range of integers, use range as an argument.\n        This is especially fast and space efficient for sampling from a\n        large population:   sample(range(10000000), 60)\n        \"\"\"\n    \n        # Sampling without replacement entails tracking either potential\n        # selections (the pool) in a list or previous selections in a set.\n    \n        # When the number of selections is small compared to the\n        # population, then tracking selections is efficient, requiring\n        # only a small set and an occasional reselection.  For\n        # a larger number of selections, the pool tracking method is\n        # preferred since the list takes less space than the\n        # set and it doesn't suffer from frequent reselections.\n    \n        # The number of calls to _randbelow() is kept at or near k, the\n        # theoretical minimum.  This is important because running time\n        # is dominated by _randbelow() and because it extracts the\n        # least entropy from the underlying random number generators.\n    \n        # Memory requirements are kept to the smaller of a k-length\n        # set or an n-length list.\n    \n        # There are other sampling algorithms that do not require\n        # auxiliary memory, but they were rejected because they made\n        # too many calls to _randbelow(), making them slower and\n        # causing them to eat more entropy than necessary.\n    \n        if isinstance(population, _Set):\n            population = tuple(population)\n        if not isinstance(population, _Sequence):\n            raise TypeError(\"Population must be a sequence or set.  For dicts, use list(d).\")\n        randbelow = self._randbelow\n        n = len(population)\n        if not 0 <= k <= n:\n>           raise ValueError(\"Sample larger than population or is negative\")\nE           ValueError: Sample larger than population or is negative\n\nC:\\Users\\ASUS\\AppData\\Local\\Programs\\Python\\Python38\\lib\\random.py:363: ValueError"}, "start": 1597884741384, "stop": 1597884741384, "uuid": "8581470d-0761-4194-bd96-8405b58228a8", "historyId": "81702e567f7bcdfef38dcf456cf8d2ec", "testCaseId": "33d4359b4da062ee05c653e3fc3dfd8b", "fullName": "TestCase.StockQuotation.HSGTstockRelevance.test_HSGTstock_Ifhsgtis_lgt.TestHSGTstockIfhsgtis_lgt#test_e", "labels": [{"name": "feature", "value": "陆股通"}, {"name": "parentSuite", "value": "TestCase.StockQuotation.HSGTstockRelevance"}, {"name": "suite", "value": "test_HSGTstock_Ifhsgtis_lgt"}, {"name": "subSuite", "value": "TestHSGTstockIfhsgtis_lgt"}, {"name": "host", "value": "DESKTOP-KBU1G8M"}, {"name": "thread", "value": "32628-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "TestCase.StockQuotation.HSGTstockRelevance.test_HSGTstock_Ifhsgtis_lgt"}]}