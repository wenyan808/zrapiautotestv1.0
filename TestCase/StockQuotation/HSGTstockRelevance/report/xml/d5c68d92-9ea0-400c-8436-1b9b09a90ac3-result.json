{"name": "test_e", "status": "broken", "statusDetails": {"message": "TypeError: Object of type map is not JSON serializable", "trace": "cls = <class 'TestCase.StockQuotation.HSGTstockRelevance.test_HSGTstock_Ifhsgtis_lgt.TestHSGTstockIfhsgtis_lgt'>\n\n    @classmethod\n    def setup_class(cls) -> None:\n        login()\n        q = OperationSql(\"192.168.1.237\", \"root\", \"123456\", \"stock_market\")\n        ts_code = q.show_sql(\"select ts,code from t_stock_search where ts='SH' or ts='SZ';\")\n        random_stock = random.sample(ts_code, 10)\n        print(random_stock)\n        # cls.ts_code_data = json.dumps(list(map(lambda code: {\"ts\": code[0], \"code\": code[1]}, random_stock)))\n>       cls.ts_code_data = json.dumps(map(lambda code: {\"ts\": code[0], \"code\": code[1]}, random_stock))\n\ntest_HSGTstock_Ifhsgtis_lgt.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\ASUS\\AppData\\Local\\Programs\\Python\\Python38\\lib\\json\\__init__.py:231: in dumps\n    return _default_encoder.encode(obj)\nC:\\Users\\ASUS\\AppData\\Local\\Programs\\Python\\Python38\\lib\\json\\encoder.py:199: in encode\n    chunks = self.iterencode(o, _one_shot=True)\nC:\\Users\\ASUS\\AppData\\Local\\Programs\\Python\\Python38\\lib\\json\\encoder.py:257: in iterencode\n    return _iterencode(o, 0)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.encoder.JSONEncoder object at 0x000001788FB92A90>\no = <map object at 0x000001788FFCE790>\n\n    def default(self, o):\n        \"\"\"Implement this method in a subclass such that it returns\n        a serializable object for ``o``, or calls the base implementation\n        (to raise a ``TypeError``).\n    \n        For example, to support arbitrary iterators, you could\n        implement default like this::\n    \n            def default(self, o):\n                try:\n                    iterable = iter(o)\n                except TypeError:\n                    pass\n                else:\n                    return list(iterable)\n                # Let the base class default method raise the TypeError\n                return JSONEncoder.default(self, o)\n    \n        \"\"\"\n>       raise TypeError(f'Object of type {o.__class__.__name__} '\n                        f'is not JSON serializable')\nE       TypeError: Object of type map is not JSON serializable\n\nC:\\Users\\ASUS\\AppData\\Local\\Programs\\Python\\Python38\\lib\\json\\encoder.py:179: TypeError"}, "start": 1597886045643, "stop": 1597886045643, "uuid": "bb898cd3-9af5-4881-b78a-d80acebe54a3", "historyId": "81702e567f7bcdfef38dcf456cf8d2ec", "testCaseId": "33d4359b4da062ee05c653e3fc3dfd8b", "fullName": "TestCase.StockQuotation.HSGTstockRelevance.test_HSGTstock_Ifhsgtis_lgt.TestHSGTstockIfhsgtis_lgt#test_e", "labels": [{"name": "feature", "value": "陆股通"}, {"name": "parentSuite", "value": "TestCase.StockQuotation.HSGTstockRelevance"}, {"name": "suite", "value": "test_HSGTstock_Ifhsgtis_lgt"}, {"name": "subSuite", "value": "TestHSGTstockIfhsgtis_lgt"}, {"name": "host", "value": "DESKTOP-KBU1G8M"}, {"name": "thread", "value": "13388-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "TestCase.StockQuotation.HSGTstockRelevance.test_HSGTstock_Ifhsgtis_lgt"}]}