{"name": "test_commend_reason", "status": "failed", "statusDetails": {"message": "AssertionError: assert 'type' in [{'list': [{'desc': '股价处于异动放量状态，准备加速上扬!', 'title': '异动放量'}], 'type': '技术面'}]\n +  where [{'list': [{'desc': '股价处于异动放量状态，准备加速上扬!', 'title': '异动放量'}], 'type': '技术面'}] = <built-in method get of dict object at 0x000002101172C680>('data')\n +    where <built-in method get of dict object at 0x000002101172C680> = {'code': '000000', 'data': [{'list': [{'desc': '股价处于异动放量状态，准备加速上扬!', 'title': '异动放量'}], 'type': '技术面'}], 'msg': 'ok'}.get", "trace": "self = <TestCase.Recommendedstockapp.test_reason_recommend.Testreasoncommend object at 0x000002101148F490>\n\n    def test_commend_reason(self):\n        url = http+\"/as_recommend/api/stock_recommend/v1/get_recommend_reasons\"\n    \n        payload = {\n            \"id\": \"151\",\n            \"key\": \"none\",\n            \"timeStamp\": get_time_stamp13()\n        }\n        sign1 = {\"sign\": get_sign(payload)}\n        payload.update(sign1)\n        payload = json.dumps(dict(payload))\n    \n        header = {}\n        header.update(JSON)\n        token1 = {\"token\": gettestLoginToken()}\n        header.update(token1)\n        headers = header\n    \n        response = requests.request(\"POST\", url, headers=headers, data=payload)\n        r = response.json()\n        print(type(r.get(\"data\")))\n    \n        assert response.status_code == 200\n        assert r.get(\"code\") == \"000000\"\n        assert r.get(\"msg\") == \"ok\"\n        if \"data\" in r:\n>           assert \"type\" in r.get(\"data\")\nE           AssertionError: assert 'type' in [{'list': [{'desc': '股价处于异动放量状态，准备加速上扬!', 'title': '异动放量'}], 'type': '技术面'}]\nE            +  where [{'list': [{'desc': '股价处于异动放量状态，准备加速上扬!', 'title': '异动放量'}], 'type': '技术面'}] = <built-in method get of dict object at 0x000002101172C680>('data')\nE            +    where <built-in method get of dict object at 0x000002101172C680> = {'code': '000000', 'data': [{'list': [{'desc': '股价处于异动放量状态，准备加速上扬!', 'title': '异动放量'}], 'type': '技术面'}], 'msg': 'ok'}.get\n\ntest_reason_recommend.py:39: AssertionError"}, "start": 1622543811957, "stop": 1622543811995, "uuid": "1e910206-c810-4748-8831-8b4c09a0b4fd", "historyId": "5942ef82671d7d85a270d3cf3db17b3d", "testCaseId": "d7b6b9974a8c957ff962e8533d96555b", "fullName": "TestCase.Recommendedstockapp.test_reason_recommend.Testreasoncommend#test_commend_reason", "labels": [{"name": "parentSuite", "value": "TestCase.Recommendedstockapp"}, {"name": "suite", "value": "test_reason_recommend"}, {"name": "subSuite", "value": "Testreasoncommend"}, {"name": "host", "value": "DESKTOP-AEOR74N"}, {"name": "thread", "value": "8956-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "TestCase.Recommendedstockapp.test_reason_recommend"}]}