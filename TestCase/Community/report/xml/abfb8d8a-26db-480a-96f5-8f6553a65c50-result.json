{"name": "test_Community_Posted_3", "status": "failed", "statusDetails": {"message": "teamcity.diff_tools.EqualsAssertionError:  :: 000000 != 460300", "trace": "self = <TestCase.Community.test_Community_Posted.TestCommunityPosted testMethod=test_Community_Posted_3>\nfirst = '000000', second = '460300', msg = None\n\n    def _patched_equals(self, first, second, msg=None):\n        try:\n>           old(self, first, second, msg)\n\nC:\\Program Files\\JetBrains\\PyCharm Community Edition 2020.1.2\\plugins\\python-ce\\helpers\\pycharm\\teamcity\\diff_tools.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <TestCase.Community.test_Community_Posted.TestCommunityPosted testMethod=test_Community_Posted_3>\nfirst = '000000', second = '460300', msg = None\n\n    def assertEqual(self, first, second, msg=None):\n        \"\"\"Fail if the two objects are unequal as determined by the '=='\n           operator.\n        \"\"\"\n        assertion_func = self._getAssertEqualityFunc(first, second)\n>       assertion_func(first, second, msg=msg)\n\nC:\\Users\\ASUS\\AppData\\Local\\Programs\\Python\\Python38\\lib\\unittest\\case.py:912: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <TestCase.Community.test_Community_Posted.TestCommunityPosted testMethod=test_Community_Posted_3>\nfirst = '000000', second = '460300', msg = None\n\n    def assertMultiLineEqual(self, first, second, msg=None):\n        \"\"\"Assert that two multi-line strings are equal.\"\"\"\n        self.assertIsInstance(first, str, 'First argument is not a string')\n        self.assertIsInstance(second, str, 'Second argument is not a string')\n    \n        if first != second:\n            # don't use difflib if the strings are too long\n            if (len(first) > self._diffThreshold or\n                len(second) > self._diffThreshold):\n                self._baseAssertEqual(first, second, msg)\n            firstlines = first.splitlines(keepends=True)\n            secondlines = second.splitlines(keepends=True)\n            if len(firstlines) == 1 and first.strip('\\r\\n') == first:\n                firstlines = [first + '\\n']\n                secondlines = [second + '\\n']\n            standardMsg = '%s != %s' % _common_shorten_repr(first, second)\n            diff = '\\n' + ''.join(difflib.ndiff(firstlines, secondlines))\n            standardMsg = self._truncateMessage(standardMsg, diff)\n>           self.fail(self._formatMessage(msg, standardMsg))\n\nC:\\Users\\ASUS\\AppData\\Local\\Programs\\Python\\Python38\\lib\\unittest\\case.py:1292: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <TestCase.Community.test_Community_Posted.TestCommunityPosted testMethod=test_Community_Posted_3>\nmsg = \"'000000' != '460300'\\n- 000000\\n+ 460300\\n\"\n\n    def fail(self, msg=None):\n        \"\"\"Fail immediately, with the given message.\"\"\"\n>       raise self.failureException(msg)\nE       AssertionError: '000000' != '460300'\nE       - 000000\nE       + 460300\n\nC:\\Users\\ASUS\\AppData\\Local\\Programs\\Python\\Python38\\lib\\unittest\\case.py:753: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <TestCase.Community.test_Community_Posted.TestCommunityPosted testMethod=test_Community_Posted_3>\n_data = {'articleType': 1, 'content': '【恒指开涨1.76%，复星医药大涨14%】香港恒生指数11月10日（周二）开盘涨1.76%，恒生国企指数涨0.68%，恒生科技指数跌2.14%。航空股上涨，国泰航空涨近15%...ode': '000538', 'name': '云南白药', 'ts': 'SZ', 'type': '2'}, {'code': '600519', 'name': '贵州茅台', 'ts': 'SH', 'type': '2'}]}\n\n    @ddt.data(*get_json(BASE_DIR + r\"/TestData/test_CommunityPosted.json\"))\n    def test_Community_Posted(self, _data):\n        login()  # 调用登录接口通过token传出来\n        url = HTTP + \"/as_community/api/post/v1/add\"\n        headers = JSON\n    \n        # 拼装参数\n        paylo = _data\n        # print(paylo)\n        sign1 = {\"sign\": get_sign(paylo)}  # 把参数签名后通过sign1传出来\n        payload1 = {}\n        payload1.update(paylo)\n        payload1.update(sign1)\n        headers = headers\n        # print(token)\n        # print(type(token))\n    \n        token1 = yamltoken()\n        token = {\"token\": token1}\n        headers.update(token)  # 将token更新到headers\n        # print(headers)\n        payload = json.dumps(dict(payload1))\n        print(self.a)\n        time.sleep(self.a)\n        self.a = 60.1\n    \n        r = Requests(self.session).post(\n            url=url, headers=headers, data=payload, title=\"发帖\"\n        )\n        # 断言\n        j = r.json()\n        print(j)\n        self.assertEqual(200, r.status_code)\n>       self.assertEqual(\"000000\", j.get(\"code\"))\n\ntest_Community_Posted.py:59: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <TestCase.Community.test_Community_Posted.TestCommunityPosted testMethod=test_Community_Posted_3>\nfirst = '000000', second = '460300', msg = None\n\n    def _patched_equals(self, first, second, msg=None):\n        try:\n            old(self, first, second, msg)\n            return\n        except AssertionError as native_error:\n            if not test_filter or test_filter(self):\n                error = EqualsAssertionError(first, second, msg)\n                if error.can_be_serialized():\n>                   raise error\nE                   teamcity.diff_tools.EqualsAssertionError:  :: 000000 != 460300\n\nC:\\Program Files\\JetBrains\\PyCharm Community Edition 2020.1.2\\plugins\\python-ce\\helpers\\pycharm\\teamcity\\diff_tools.py:38: EqualsAssertionError"}, "attachments": [{"name": "log", "source": "4456dfbf-a3ea-440e-80d8-8e271f888b45-attachment.txt", "type": "text/plain"}], "start": 1606879940855, "stop": 1606879940908, "uuid": "f7cd6601-9ec2-40ed-b115-6b5667a29e55", "historyId": "7d6c53464e6c186a8d9d04ed38f04e73", "testCaseId": "b5e5b737e91c3716ff7cafb23fde3f11", "fullName": "TestCase.Community.test_Community_Posted.TestCommunityPosted#test_Community_Posted_3", "labels": [{"name": "parentSuite", "value": "TestCase.Community"}, {"name": "suite", "value": "test_Community_Posted"}, {"name": "subSuite", "value": "TestCommunityPosted"}, {"name": "host", "value": "DESKTOP-KBU1G8M"}, {"name": "thread", "value": "151472-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "TestCase.Community.test_Community_Posted"}]}