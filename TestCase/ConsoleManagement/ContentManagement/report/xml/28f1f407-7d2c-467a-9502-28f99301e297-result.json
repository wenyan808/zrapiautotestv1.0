{"name": "test_Community_conReportHandle[info1]", "status": "failed", "statusDetails": {"message": "AssertionError: None", "trace": "self = <TestCase.ConsoleManagement.ContentManagement.test_Community_conReportHandleWholeHistory.TestCommunityConReportHandle object at 0x000001AB456CDF10>\ninfo = {'currentPage': 20, 'pageSize': 1, 'reportedId': '5fe990af791d040006730367', 'reportedUser': '64754556', ...}\n\n    @pytest.mark.parametrize('info', get_json(BASE_DIR + r\"/TestData/test_Community_conReportHandleWholeHistory.json\"))\n    def test_Community_conReportHandle(self, info):\n        url = console_HTTP + \"/api/con_report/v1/handle_whole_history\"\n        headers = console_JSON\n    \n        # 拼装参数\n        # paylo = {\n        #     \"currentPage\": 20,\n        #     \"pageSize\": 1,\n        #     \"type\": 1\n        # }\n        paylo = info\n        # print(paylo)\n        sign1 = {\"sign\": get_sign(paylo)}  # 把参数签名后通过sign1传出来\n        payload1 = {}\n        payload1.update(paylo)\n        payload1.update(sign1)\n        headers = headers\n        # print(token)\n        # print(type(token))\n        token = {\"token\": getConsoleLogin_token()}\n        headers.update(token)  # 将token更新到headers\n        # print(headers)\n        payload = json.dumps(dict(payload1))\n        # time.sleep(60.01)\n    \n        r = Requests(self.session).post(\n            url=url, headers=headers, data=payload, title=\"(所有举报记录)处置历史\"\n        )\n    \n        j = r.json()\n        # print(j)\n    \n        assert r.status_code == 200\n        if j.get(\"code\") == \"000000\":\n            assert j.get(\"code\") == \"000000\"\n            assert j.get(\"msg\") == \"ok\"\n            if \"data\" in j:\n                assert j.get(\"data\").get(\"pageSize\") == paylo.get(\"pageSize\")\n                assert j.get(\"data\").get(\"currentPage\") == paylo.get(\"currentPage\")\n                assert \"total\" in j.get(\"data\")\n                if \"list\" in j.get(\"data\"):\n                    if len(j.get(\"data\").get(\"list\")) != 0:\n                        for i in range(len(j.get(\"data\").get(\"list\"))):\n                            assert \"id\" in j.get(\"data\").get(\"list\")[i]\n                            assert \"createTime\" in j.get(\"data\").get(\"list\")[i]\n                            assert \"operator\" in j.get(\"data\").get(\"list\")[i]\n                            assert \"handleStatus\" in j.get(\"data\").get(\"list\")[i]\n                            if \"post\" in j.get(\"data\").get(\"list\")[i]:\n                                assert \"articleType\" in j.get(\"data\").get(\"list\")[i].get(\"post\")\n                                assert \"title\" in j.get(\"data\").get(\"list\")[i].get(\"post\")\n                                assert \"content\" in j.get(\"data\").get(\"list\")[i].get(\"post\")\n                                assert \"products\" in j.get(\"data\").get(\"list\")[i].get(\"post\")\n                                assert \"content\" in j.get(\"data\").get(\"list\")[i].get(\"post\")\n                            assert \"reportedUser\" in j.get(\"data\").get(\"list\")[i]\n                            assert \"reportedNickName\" in j.get(\"data\").get(\"list\")[i]\n                            assert \"reportedUserType\" in j.get(\"data\").get(\"list\")[i]\n                            assert \"reportedId\" in j.get(\"data\").get(\"list\")[i]\n                            assert \"reportedUserId\" in j.get(\"data\").get(\"list\")[i]\n    \n                    else:\n                        logging.info(\"list为空list\")\n    \n    \n        else:\n>           raise AssertionError(print(j))\nE           AssertionError: None\n\ntest_Community_conReportHandleWholeHistory.py:95: AssertionError"}, "parameters": [{"name": "info", "value": "{'reportedId': '5fe990af791d040006730367', 'updateStartTime': '2020-12-30 11:15:32', 'updateEndTime': '2020-1-22 11:15:32', 'currentPage': 20, 'pageSize': 1, 'type': 1, 'reportedUser': '64754556'}"}], "start": 1611366552757, "stop": 1611366552865, "uuid": "f435624c-6f02-4d58-813b-e708fe3121c8", "historyId": "9823f712a170720d17aefe2ef528560d", "testCaseId": "ef83020b70829852481de7a6410f9249", "fullName": "TestCase.ConsoleManagement.ContentManagement.test_Community_conReportHandleWholeHistory.TestCommunityConReportHandle#test_Community_conReportHandle", "labels": [{"name": "feature", "value": "社区console_(所有举报记录)处置历史"}, {"name": "parentSuite", "value": "TestCase.ConsoleManagement.ContentManagement"}, {"name": "suite", "value": "test_Community_conReportHandleWholeHistory"}, {"name": "subSuite", "value": "TestCommunityConReportHandle"}, {"name": "host", "value": "DESKTOP-KBU1G8M"}, {"name": "thread", "value": "9436-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "TestCase.ConsoleManagement.ContentManagement.test_Community_conReportHandleWholeHistory"}]}