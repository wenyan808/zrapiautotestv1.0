{"name": "test_StockSelectionDevice_modify01", "status": "broken", "statusDetails": {"message": "bson.errors.InvalidDocument: cannot encode object: <Common.show_sql.OperationSql object at 0x00000118DA27D6D0>, of type: <class 'Common.show_sql.OperationSql'>", "trace": "self = <TestCase.StockSelectionDevice.test_StockSelectionDevice_02_modify.TestStockSelectionDeviceModify object at 0x00000118DA260B20>\n\n    @allure.story('修改策略_1-中国香港')\n    def test_StockSelectionDevice_modify01(self):\n        q = OperationSql(\"192.168.1.237\", \"root\", \"123456\", \"user_account\")\n        userId = q.show_sql(\"select id from t_user_account where `zr_no`= '68904140';\")\n        p = OperationSql(\"192.168.1.236\", \"root\", \"123456\", \"stock_selector\")\n>       _id = MongoDB(f\"select _id from t_tactic6 where `user_id`= {userId};\",p)\n\ntest_StockSelectionDevice_02_modify.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\Common\\show_sql.py:97: in MongoDB\n    for x in mydoc:\nC:\\Users\\ASUS\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\pymongo\\cursor.py:1156: in next\n    if len(self.__data) or self._refresh():\nC:\\Users\\ASUS\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\pymongo\\cursor.py:1073: in _refresh\n    self.__send_message(q)\nC:\\Users\\ASUS\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\pymongo\\cursor.py:953: in __send_message\n    response = client._run_operation_with_response(\nC:\\Users\\ASUS\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\pymongo\\mongo_client.py:1342: in _run_operation_with_response\n    return self._retryable_read(\nC:\\Users\\ASUS\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\pymongo\\mongo_client.py:1464: in _retryable_read\n    return func(session, server, sock_info, slave_ok)\nC:\\Users\\ASUS\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\pymongo\\mongo_client.py:1334: in _cmd\n    return server.run_operation_with_response(\nC:\\Users\\ASUS\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\pymongo\\server.py:101: in run_operation_with_response\n    message = operation.get_message(\nC:\\Users\\ASUS\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\pymongo\\message.py:335: in get_message\n    request_id, msg, size, _ = _op_msg(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nflags = 0\ncommand = SON([('find', 't_stock_selected'), ('filter', {\"select _id from t_tactic6 where `user_id`= ('90106be7c8444dda8f0f5b745...@\\x08\\xa0\\xe3\\xf7)\\xcd\\x8e\\xec\\x92', 4)}), ('$db', 'stock_market'), ('$readPreference', {'mode': 'primaryPreferred'})])\ndbname = 'stock_market', read_preference = Primary(), slave_ok = True\ncheck_keys = False\nopts = CodecOptions(document_class=dict, tz_aware=False, uuid_representation=PYTHON_LEGACY, unicode_decode_error_handler='strict', tzinfo=None, type_registry=TypeRegistry(type_codecs=[], fallback_encoder=None))\nctx = None\n\n    def _op_msg(flags, command, dbname, read_preference, slave_ok, check_keys,\n                opts, ctx=None):\n        \"\"\"Get a OP_MSG message.\"\"\"\n        command['$db'] = dbname\n        # getMore commands do not send $readPreference.\n        if read_preference is not None and \"$readPreference\" not in command:\n            if slave_ok and not read_preference.mode:\n                command[\"$readPreference\"] = (\n                    ReadPreference.PRIMARY_PREFERRED.document)\n            else:\n                command[\"$readPreference\"] = read_preference.document\n        name = next(iter(command))\n        try:\n            identifier = _FIELD_MAP.get(name)\n            docs = command.pop(identifier)\n        except KeyError:\n            identifier = \"\"\n            docs = None\n        try:\n            if ctx:\n                return _op_msg_compressed(\n                    flags, command, identifier, docs, check_keys, opts, ctx)\n>           return _op_msg_uncompressed(\n                flags, command, identifier, docs, check_keys, opts)\nE               bson.errors.InvalidDocument: cannot encode object: <Common.show_sql.OperationSql object at 0x00000118DA27D6D0>, of type: <class 'Common.show_sql.OperationSql'>\n\nC:\\Users\\ASUS\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\pymongo\\message.py:706: InvalidDocument"}, "start": 1597030408859, "stop": 1597030408897, "uuid": "2f0164ef-fc16-4481-84a4-c8ff69d70bf6", "historyId": "8dff92072f35e560d80c5814605ae57b", "testCaseId": "05fb960158dfbc3e5d891cb2d478e517", "fullName": "TestCase.StockSelectionDevice.test_StockSelectionDevice_02_modify.TestStockSelectionDeviceModify#test_StockSelectionDevice_modify01", "labels": [{"name": "feature", "value": "选股器"}, {"name": "story", "value": "修改策略_1-中国香港"}, {"name": "parentSuite", "value": "TestCase.StockSelectionDevice"}, {"name": "suite", "value": "test_StockSelectionDevice_02_modify"}, {"name": "subSuite", "value": "TestStockSelectionDeviceModify"}, {"name": "host", "value": "DESKTOP-KBU1G8M"}, {"name": "thread", "value": "76460-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "TestCase.StockSelectionDevice.test_StockSelectionDevice_02_modify"}]}