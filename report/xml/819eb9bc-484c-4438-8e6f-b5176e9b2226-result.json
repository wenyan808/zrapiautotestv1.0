{"name": "test_all", "status": "failed", "statusDetails": {"message": "AssertionError", "trace": "self = <TestCase.StockQuotation.OptionalStock.test_del_optional_stock.TestDelOptionalStock object at 0x1255E770>\n\n    @allure.story('删除自选股_All')\n    def test_all(self):\n        q = OperationSql()\n        userId = str(q.show_sql(\"select id from t_user_account where `zr_no`= '68904140';\"))\n        id = MongoDB(\"userId\", userId[2:-3:])\n        list1 = list()\n        for id1 in id:\n            list1.append(str(id1.get('_id')))\n        _id = {\"ids\": list1}\n        # 写\n        write_xlsx(\"自选股\", 24, 7, str(_id))\n        response = zhuorui('自选股', '删除自选股_All')\n>       assert_data(response, '000000', 'ok')\n\nTestCase\\StockQuotation\\OptionalStock\\test_del_optional_stock.py:80: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [200]>, code = '000000', msg = 'ok'\n\n    def assert_data(response, code, msg):\n        assert code == response.json().get(\"code\")\n        assert msg == response.json().get(\"msg\")\n>       assert \"data\" in response.json()\nE       AssertionError\n\nCommon\\assertapi.py:4: AssertionError"}, "start": 1593328815166, "stop": 1593328815271, "uuid": "a5891018-7566-4453-a932-1db297269fd7", "historyId": "3f9cf55aceb2ff29c77306d902fb1717", "testCaseId": "4b65da1ac05b68b69683afe4e165a356", "fullName": "TestCase.StockQuotation.OptionalStock.test_del_optional_stock.TestDelOptionalStock#test_all", "labels": [{"name": "story", "value": "删除自选股_All"}, {"name": "parentSuite", "value": "TestCase.StockQuotation.OptionalStock"}, {"name": "suite", "value": "test_del_optional_stock"}, {"name": "subSuite", "value": "TestDelOptionalStock"}, {"name": "host", "value": "DESKTOP-7K7NA43"}, {"name": "thread", "value": "38524-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "TestCase.StockQuotation.OptionalStock.test_del_optional_stock"}]}